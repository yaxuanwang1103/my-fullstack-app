name: CD - 持续部署

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # 允许手动触发
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  deploy:
    name: 部署到服务器
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://your-app-url.com
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v3
      
      - name: 📋 获取版本信息
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="latest"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 部署版本: $VERSION"
      
      - name: 🚀 部署到服务器
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "🚀 开始部署..."
            
            # 进入项目目录
            cd /path/to/your/app || exit 1
            
            # 拉取最新代码
            echo "📥 拉取最新代码..."
            git pull origin main
            
            # 拉取最新镜像
            echo "🐳 拉取 Docker 镜像..."
            docker-compose pull
            
            # 停止旧容器
            echo "🛑 停止旧容器..."
            docker-compose down
            
            # 启动新容器
            echo "▶️ 启动新容器..."
            docker-compose up -d
            
            # 等待服务启动
            echo "⏳ 等待服务启动..."
            sleep 10
            
            # 检查容器状态
            echo "📊 检查容器状态..."
            docker-compose ps
            
            # 清理旧镜像
            echo "🧹 清理旧镜像..."
            docker image prune -f
            
            echo "✅ 部署完成！"
      
      - name: 🔍 健康检查
        run: |
          echo "🔍 执行健康检查..."
          
          # 检查前端
          curl -f http://${{ secrets.SERVER_HOST }}:5173 || echo "⚠️ 前端健康检查失败"
          
          # 检查后端A
          curl -f http://${{ secrets.SERVER_HOST }}:3000/health || echo "⚠️ 后端A健康检查失败"
          
          # 检查后端B
          curl -f http://${{ secrets.SERVER_HOST }}:4000/health || echo "⚠️ 后端B健康检查失败"
          
          echo "✅ 健康检查完成"
      
      - name: 📢 部署通知
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ 部署成功！"
            echo "🎉 版本 ${{ steps.version.outputs.version }} 已部署到生产环境"
          else
            echo "❌ 部署失败！"
            echo "请检查日志并手动回滚"
          fi
  
  # 回滚任务（可选）
  rollback:
    name: 回滚部署
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy
    
    steps:
      - name: 🔄 执行回滚
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "🔄 开始回滚..."
            cd /path/to/your/app
            git checkout HEAD~1
            docker-compose down
            docker-compose up -d
            echo "✅ 回滚完成"
