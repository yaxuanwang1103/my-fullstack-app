name: CD - 持续部署到 AWS ECS

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # 允许手动触发
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  AWS_REGION: us-east-2  # 修改为你的AWS区域
  ECS_CLUSTER: todoapp-cluster
  
  # Backend A
  ECS_SERVICE_BACKEND_A: todoapp-backend-a
  ECS_TASK_DEFINITION_BACKEND_A: todoapp-backend-a
  CONTAINER_NAME_BACKEND_A: todoapp-backend-a
  
  # Backend B
  ECS_SERVICE_BACKEND_B: todoapp-backend-b
  ECS_TASK_DEFINITION_BACKEND_B: todoapp-backend-b
  CONTAINER_NAME_BACKEND_B: todoapp-backend-b
  
  # Frontend
  ECS_SERVICE_FRONTEND: todoapp-frontend
  ECS_TASK_DEFINITION_FRONTEND: todoapp-frontend
  CONTAINER_NAME_FRONTEND: todoapp-frontend

jobs:
  deploy:
    name: 部署到 AWS ECS
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v3
      
      - name: 📋 获取版本信息
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="latest"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 部署版本: $VERSION"
      
      - name: 🔐 配置 AWS 凭证
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 🔑 登录到 Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: 🚀 部署 Backend A 到 ECS
        run: |
          echo "🚀 部署 Backend A..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE_BACKEND_A }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION_BACKEND_A }}:6 \
            --force-new-deployment
      
      - name: 🚀 部署 Backend B 到 ECS
        run: |
          echo "🚀 部署 Backend B..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE_BACKEND_B }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION_BACKEND_B }}:4 \
            --force-new-deployment
      
      - name: 🚀 部署 Frontend 到 ECS
        run: |
          echo "🚀 部署 Frontend..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE_FRONTEND }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION_FRONTEND }}:5 \
            --force-new-deployment
      
      - name: ⏳ 等待 Backend A 部署完成
        run: |
          echo "⏳ 等待 Backend A 服务稳定..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE_BACKEND_A }}
          echo "✅ Backend A 部署完成"
      
      - name: ⏳ 等待 Backend B 部署完成
        run: |
          echo "⏳ 等待 Backend B 服务稳定..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE_BACKEND_B }}
          echo "✅ Backend B 部署完成"
      
      - name: ⏳ 等待 Frontend 部署完成
        run: |
          echo "⏳ 等待 Frontend 服务稳定..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE_FRONTEND }}
          echo "✅ Frontend 部署完成"
      
      - name: 📊 检查服务状态
        run: |
          echo "📊 检查所有服务状态..."
          
          echo "Backend A 状态:"
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE_BACKEND_A }} \
            --query 'services[0].[serviceName,status,runningCount,desiredCount]' \
            --output table
          
          echo "Backend B 状态:"
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE_BACKEND_B }} \
            --query 'services[0].[serviceName,status,runningCount,desiredCount]' \
            --output table
          
          echo "Frontend 状态:"
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE_FRONTEND }} \
            --query 'services[0].[serviceName,status,runningCount,desiredCount]' \
            --output table
      
      - name: 📢 部署通知
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ 部署成功！"
            echo "🎉 版本 ${{ steps.version.outputs.version }} 已部署到 ECS"
            echo "📦 Cluster: ${{ env.ECS_CLUSTER }}"
            echo "🔧 Services: Backend A, Backend B, Frontend"
          else
            echo "❌ 部署失败！"
            echo "请检查日志并考虑回滚"
          fi
